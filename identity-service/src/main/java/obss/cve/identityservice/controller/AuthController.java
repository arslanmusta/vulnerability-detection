package obss.cve.identityservice.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import obss.cve.identityservice.repository.LdapRepository;
import obss.cve.identityservice.model.TokenRequest;
import obss.cve.identityservice.model.TokenResponse;
import obss.cve.identityservice.utils.JwtTokenProvider;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/v1/")
public class AuthController {

    private final LdapRepository repository;

    private final JwtTokenProvider jwtTokenProvider;

    public AuthController(LdapRepository repository, JwtTokenProvider jwtTokenProvider) {
        this.repository = repository;
        this.jwtTokenProvider = jwtTokenProvider;
    }

    @Operation(summary = "Authenticate user and generate token")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Token generated"),
            @ApiResponse(responseCode = "401", description = "Username or password wrong", content = {@Content})
    })
    @PostMapping("/identity/login")
    public ResponseEntity<TokenResponse> login(@RequestBody TokenRequest request) {
        if (!repository.auth(request.getUsername(), request.getPassword())) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        } else {
            String group = repository.getUserGroup(request.getUsername());
            String token = jwtTokenProvider.generateToken(request.getUsername(), group);
            return ResponseEntity.ok(new TokenResponse(token));
        }
    }
}
