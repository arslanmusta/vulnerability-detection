package obss.cve.identityservice.repository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.ldap.core.AttributesMapper;
import org.springframework.ldap.core.LdapTemplate;
import org.springframework.ldap.query.ContainerCriteria;
import org.springframework.ldap.query.LdapQuery;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@SpringBootTest
public class LdapRepositoryTests {

    private LdapRepository ldapRepository;

    @Mock
    private LdapTemplate ldapTemplate;

    @BeforeEach
    public void setUp() {
        ldapRepository = new LdapRepository(ldapTemplate);
    }

    @Test
    public void whenAuthCalledWithValidCredential_thenReturnTrue() {
        boolean result = ldapRepository.auth("username", "password");

        verify(ldapTemplate).authenticate(any(), anyString());

        assertTrue(result);
    }

    @Test
    public void whenAuthCalledWithInvalidCredential_thenReturnFalse() {
        doThrow(new RuntimeException()).when(ldapTemplate).authenticate(any(), anyString());

        boolean result = ldapRepository.auth("username", "password");

        verify(ldapTemplate).authenticate(any(), anyString());

        assertTrue(!result);
    }

    @Test
    public void whenGetUserGroupCall_themSearchOnLdap() {
        when(ldapTemplate.search(any(LdapQuery.class), any(AttributesMapper.class))).thenReturn(List.of("User"));

        String result = ldapRepository.getUserGroup("uid");

        verify(ldapTemplate).search(any(LdapQuery.class), any(AttributesMapper.class));
        assertEquals(result, "User");
    }

}
