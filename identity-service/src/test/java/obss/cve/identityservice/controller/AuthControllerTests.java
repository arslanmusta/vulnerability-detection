package obss.cve.identityservice.controller;

import obss.cve.identityservice.model.TokenRequest;
import obss.cve.identityservice.model.TokenResponse;
import obss.cve.identityservice.repository.LdapRepository;
import obss.cve.identityservice.utils.JwtTokenProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.util.ReflectionTestUtils;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@SpringBootTest
public class AuthControllerTests {
    private AuthController controller;

    private LdapRepository ldapRepository;

    @Spy
    private JwtTokenProvider jwtTokenProvider = new JwtTokenProvider();


    @BeforeEach
    public void setUp() {
        ldapRepository = mock(LdapRepository.class);
        ReflectionTestUtils.setField(jwtTokenProvider, "secret", "bXN0Zi5hcnNsYW4=");
        controller = new AuthController(ldapRepository, jwtTokenProvider);
    }

    @Test
    public void whenLoginCalledWithValidCredentials_thenReturnModelWithOk() {
        when(ldapRepository.auth(anyString(), anyString())).thenReturn(true);

        ResponseEntity<TokenResponse> result = controller.login(new TokenRequest("username", "password"));

        assertTrue(result.getStatusCode() == HttpStatus.OK);
        assertTrue(result.getBody().getToken() != null);
    }

    @Test
    public void whenLoginCalledWithInvalidCredentials_thenReturnModelWithUnauthorized() {
        when(ldapRepository.auth(anyString(), anyString())).thenReturn(false);

        ResponseEntity<TokenResponse> result = controller.login(new TokenRequest("username", "password"));

        assertTrue(result.getStatusCode() == HttpStatus.UNAUTHORIZED);
    }

}
