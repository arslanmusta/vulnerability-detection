package obss.cve.vulnerableupdateworker.proxy;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.stereotype.Component;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.*;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.zip.GZIPInputStream;

@Component
public class CveProxy {


    public JsonNode GetCveAsJsonNode(String uri) {
        try {
            InputStream is = new URL(uri).openStream();
            GZIPInputStream gis = new GZIPInputStream(is);
            BufferedReader rd = new BufferedReader(new InputStreamReader(gis, Charset.forName("UTF-8")));
            String jsonString = readAll(rd);
            ObjectMapper mapper = new ObjectMapper();
            JsonFactory factory = mapper.getFactory();
            JsonParser parser = factory.createParser(jsonString);
            JsonNode actualObj = mapper.readTree(parser);

            return actualObj;
        } catch (IOException e) {
            return null;
        }

    }

    public Document GetCpeAsDocument(String url) {
        try {
            InputStream is = new URL("https://nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml.gz").openStream();
            GZIPInputStream gis = new GZIPInputStream(is);
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document doc = db.parse(gis);
            return doc;
        } catch (IOException | ParserConfigurationException | SAXException e) {
            return null;
        }
    }

    private static String readAll(Reader rd) throws IOException {
        StringBuilder sb = new StringBuilder();
        int cp;
        while ((cp = rd.read()) != -1) {
            sb.append((char) cp);
        }
        return sb.toString();
    }
}
