package obss.cve.vulnerableupdateworker;

import com.fasterxml.jackson.databind.JsonNode;
import obss.cve.vulnerableupdateworker.domain.*;
import obss.cve.vulnerableupdateworker.proxy.CveProxy;
import obss.cve.vulnerableupdateworker.repository.ConfigRepository;
import obss.cve.vulnerableupdateworker.repository.CpeItemRepository;
import obss.cve.vulnerableupdateworker.repository.CveItemRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

import java.util.*;
import java.util.stream.StreamSupport;

@Component
public class DatabaseUpdateTask {

    private final CveProxy cveProxy;

    private final CveItemFactory cveItemFactory;

    private final CpeItemFactory cpeItemFactory;

    private final CveItemRepository cveItemRepository;

    private final CpeItemRepository cpeItemRepository;

    private final ConfigRepository configRepository;

    private static final Logger log = LoggerFactory.getLogger(DatabaseUpdateTask.class);

    @Value("${sources.cve.batch}")
    private String cveBatchSource;

    @Value("${sources.cve.modified}")
    private String cveModifiedSource;

    @Value("${sources.cpe}")
    private String cpeSource;

    @Value("${cve.update.timeout}")
    private long cveUpdateTimout;

    public DatabaseUpdateTask(CveProxy cveProxy, CveItemFactory cveItemFactory, CpeItemFactory cpeItemFactory, CveItemRepository cveItemRepository, CpeItemRepository cpeItemRepository, ConfigRepository configRepository) {
        this.cveProxy = cveProxy;
        this.cveItemFactory = cveItemFactory;
        this.cpeItemFactory = cpeItemFactory;
        this.cveItemRepository = cveItemRepository;
        this.cpeItemRepository = cpeItemRepository;
        this.configRepository = configRepository;
    }

    @Scheduled(fixedDelayString = "${cve.update.period}")
    public void update() {
        Config config = configRepository.findById("last_cve_sync_date")
                .orElse(new Config("last_cve_sync_date", "0"));

        long lastCveSyncDate = Long.parseLong(config.getValue());

        if ( lastCveSyncDate + cveUpdateTimout <  System.currentTimeMillis() / 1000L) {
            log.info("Database batch update started");
            for (int i = 2002; i <= Calendar.getInstance().get(Calendar.YEAR); i++) {
                String uri = String.format(cveBatchSource, i);

                fetchAndUpdateCve(uri);
            }

            fetchAndUpdateCve(cveModifiedSource);

            fetchAndUpdateCpe(cpeSource);

            config.setValue(Long.toString(System.currentTimeMillis() / 1000L));
            configRepository.save(config);
        } else {
            log.info("Database partial update started");

            fetchAndUpdateCve(cveModifiedSource);
        }
    }
    private void fetchAndUpdateCve(String uri) {
        log.info("Calling " + uri);
        JsonNode node = cveProxy.GetCveAsJsonNode(uri);
        log.info("Processing data for " + uri);
        CveItem[] cveItems = StreamSupport.stream(node.get("CVE_Items").spliterator(), false).map(cveItemFactory::CreateFromJsonNode).toArray(CveItem[]::new);

        log.info("Updating database for " + uri);
        cveItemRepository.saveAll(() -> Arrays.stream(cveItems).iterator());

        log.info("Update completed for " + uri);
    }

    private void fetchAndUpdateCpe(String uri) {
        log.info("Calling " + uri);
        Document doc = cveProxy.GetCpeAsDocument(uri);

        log.info("Processing data for " + uri);
        NodeList nodes = doc.getElementsByTagName("cpe-23:cpe23-item");

        HashMap<String, HashMap<String, CpeItem>> cpeItemMap = new HashMap<>();
        for (int i = 0; i < nodes.getLength(); i++) {
            var cpeItem = cpeItemFactory.CreateFromNode(nodes.item(i));

            HashMap<String, CpeItem> productMap = cpeItemMap.get(cpeItem.getId().getVendor());

            if (productMap == null) {
                cpeItemMap.put(cpeItem.getId().getVendor(), new HashMap<>(){{
                    put(cpeItem.getId().getProduct(), cpeItem);
                }});
            } else {
                CpeItem existCpeItem = productMap.get(cpeItem.getId().getProduct());
                if (existCpeItem == null) {
                    productMap.put(cpeItem.getId().getProduct(), cpeItem);
                } else {
                    existCpeItem.AddVersion(cpeItem.getVersions().get(0));
                }
            }
        }

        List<CpeItem> cpeItemList = new ArrayList<>(cpeItemMap.values().stream().map(HashMap::values).reduce(new ArrayList<>(), (arr, item) -> {
            arr.addAll(item);
            return arr;
        }));

        log.info("Updating database for " + uri);
        cpeItemRepository.saveAll(cpeItemList);
        log.info("Update completed for " + uri);
    }
}
