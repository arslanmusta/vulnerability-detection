package obss.cve.vulnerableupdateworker.domain;

import com.fasterxml.jackson.databind.JsonNode;
import org.springframework.stereotype.Component;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

@Component
public class CveItemFactory {

    private static final DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'");

    public CveItem CreateFromJsonNode(JsonNode item) {
        String id = item.at("/cve/CVE_data_meta/ID").textValue();
        String summary = item.at("/cve/description/description_data/0/value").textValue();
        String cvss2 = item.at("/impact/baseMetricV2/cvssV2/baseScore").toString();
        String cvss3 = item.at("/impact/baseMetricV3/cvssV3/baseScore").toString();
        String publishedDate = item.get("publishedDate").asText();
        String updatedDate = item.get("lastModifiedDate").asText();

        CveItem cveItem = null;
        try {
            cveItem = new CveItem(id, summary, cvss2, cvss3, dateFormat.parse(publishedDate), dateFormat.parse(updatedDate));
        } catch (ParseException e) {
            return null;
        }

        JsonNode cveNodes = item.at("/configurations/nodes");

        for (JsonNode cpeNode : cveNodes) {
            JsonNode cpeMatches = cpeNode.at("/cpe_match");
            JsonNode children = cpeNode.at("/children");

            for (JsonNode cpeMatch : cpeMatches) {
                CveProduct cveProduct = CreateCveProduct(cpeMatch);

                if (cveProduct != null) {
                    cveItem.AddCveProduct(cveProduct);
                }
            }

            for (JsonNode childItem : children) {
                JsonNode childCpeMatches = childItem.at("/cpe_match");

                for (JsonNode cpeMatch : childCpeMatches) {
                    CveProduct cveProduct = CreateCveProduct(cpeMatch);

                    if (cveProduct != null) {
                        cveItem.AddCveProduct(cveProduct);
                    }
                }
            }
        }

        return cveItem;
    }

    private CveProduct CreateCveProduct(JsonNode node) {
        boolean vulnerable = node.get("vulnerable").asBoolean();
        if (vulnerable) {
            String[] cpe23Uri = node.get("cpe23Uri").asText().split(":");
            String vendor = cpe23Uri[3];
            String product = cpe23Uri[4];
            String version = cpe23Uri[5];
            String includingEnd = null;
            String excludingEnd = null;

            JsonNode includingEndNode = node.get("versionEndIncluding");
            if (includingEndNode != null) {
                includingEnd = includingEndNode.asText();
            }
            JsonNode excludingEndNode = node.get("versionEndExcluding");
            if (excludingEndNode != null) {
                excludingEnd = excludingEndNode.asText();
            }

            CveProduct cveProduct = new CveProduct(vendor, product, version, includingEnd, excludingEnd);
            return cveProduct;
        }
        return null;
    }
}
