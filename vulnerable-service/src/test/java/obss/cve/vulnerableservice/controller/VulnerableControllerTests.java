package obss.cve.vulnerableservice.controller;

import obss.cve.vulnerableservice.domain.Vulnerable;
import obss.cve.vulnerableservice.model.VulnerableModelAssembler;
import obss.cve.vulnerableservice.service.VulnerableService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@SpringBootTest
public class VulnerableControllerTests {
    private VulnerableController vulnerableController;

    @Mock
    private VulnerableService vulnerableService;

    private List<Vulnerable> serviceResult;

    @BeforeEach
    public void setUp() {
        Vulnerable vulnerable1 = new Vulnerable(1, 11, "cve-1", false);
        Vulnerable vulnerable2 = new Vulnerable(2, 22, "cve-2", false);

        vulnerable1.setId("id1");
        vulnerable2.setId("id2");

        serviceResult = new ArrayList<>();
        serviceResult.add(vulnerable1);
        serviceResult.add(vulnerable2);

        vulnerableController = new VulnerableController(vulnerableService, new VulnerableModelAssembler());
    }

    @Test
    public void whenAllCalled_thenReturnCollectionOfServiceResult() {
        when(vulnerableService.findAll()).thenReturn(serviceResult);

        CollectionModel<EntityModel<Vulnerable>> result = vulnerableController.all();

        assertTrue(result.getContent().stream().allMatch(vulnerableEntityModel -> serviceResult.stream().anyMatch(v -> v.getId() == vulnerableEntityModel.getContent().getId())));
    }

    @Test
    public void whenOneCalled_thenReturnModelOfServiceResult() {
        Vulnerable vulnerable = new Vulnerable(1, 11, "cve-1", false);
        vulnerable.setInventoryId(1);
        vulnerable.setInventoryItemId(11);
        vulnerable.setCveId("cve-1");
        vulnerable.setId("id1");

        when(vulnerableService.findOne("id1")).thenReturn(vulnerable);

        EntityModel<Vulnerable> result = vulnerableController.one("id1");

        assertTrue(
                result.getContent().getId().equals(vulnerable.getId()) &&
                        result.getContent().getCveId() == vulnerable.getCveId() &&
                        result.getContent().getInventoryId() == vulnerable.getInventoryId() &&
                        result.getContent().getInventoryItemId() == vulnerable.getInventoryItemId());
    }

    @Test
    public void whenPassiveCalled_thenReturnModelWithNoContent() {
        ResponseEntity<?> result = vulnerableController.passive("id1");

        verify(vulnerableService).passive("id1");
        assertTrue(result.getStatusCode() == HttpStatus.NO_CONTENT);
    }

}
