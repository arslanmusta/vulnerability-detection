package obss.cve.vulnerableservice.service;

import obss.cve.vulnerableservice.domain.Vulnerable;
import obss.cve.vulnerableservice.repository.VulnerableRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@SpringBootTest
public class VulnerableServiceTests {

    private VulnerableService vulnerableService;

    private List<Vulnerable> repoResult;

    @Mock
    private VulnerableRepository vulnerableRepository;

    @BeforeEach
    public void setUp() {
        repoResult = new ArrayList<>();

        repoResult.add(new Vulnerable(1, 11, "cve-1", false));
        repoResult.add(new Vulnerable(2, 22, "cve-2", false));

        vulnerableService = new VulnerableService(vulnerableRepository);
    }

    @Test
    public void whenFindAllCalled_thenReturnRepositoryResult() {
        when(vulnerableRepository.findAll()).thenReturn(repoResult);

        List<Vulnerable> result = vulnerableService.findAll();

        assertSame(result, repoResult);
    }

    @Test
    public void whenFindOneCalled_thenReturnRepositoryResult() {
        Vulnerable vulnerable = new Vulnerable(2, 22, "cve-2", false);
        vulnerable.setId("id1");

        when(vulnerableRepository.findById("id1")).thenReturn(Optional.of(vulnerable));

        Vulnerable result = vulnerableService.findOne("id1");

        assertSame(result, vulnerable);
    }

    @Test
    public void whenFindOneCalledWithNonExistsVulnerable_thenThrowVulnerableNotFoundException() {
        when(vulnerableRepository.findById(anyString())).thenReturn(Optional.empty());

        assertThrows(VulnerableNotFoundException.class, () -> vulnerableService.findOne("id1"));
    }

    @Test
    public void whenCallPassive_thenSetPassiveFieldToTrue() {
        Vulnerable vulnerable = new Vulnerable(2, 22, "cve-2", false);
        vulnerable.setId("id1");

        when(vulnerableRepository.findById("id1")).thenReturn(Optional.of(vulnerable));

        vulnerableService.passive("id1");

        verify(vulnerableRepository).save(vulnerable);
        assertTrue(vulnerable.isPassive());
    }
}
