package obss.cve.browserapigw.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;

@Configuration
public class RouteConfiguration {

    @Value(value = "${service.destinations.inventory}")
    private String inventoryServiceUrl;

    @Value(value = "${service.destinations.vulnerable}")
    private String vulnerableServiceUrl;

    @Value(value = "${service.destinations.identity}")
    private String identityServiceUrl;

    @Value(value = "${service.destinations.notification}")
    private String notificationServiceUrl;

    @Bean
    public RouteLocator inventoryProxyRouting(RouteLocatorBuilder builder) {
        return builder.routes()
                .route(r -> r.path("/api/v1/inventory").and().method(HttpMethod.GET).uri(inventoryServiceUrl))
                .route(r -> r.path("/api/v1/inventory/**").and().method(HttpMethod.GET).uri(inventoryServiceUrl))
                .route(r -> r.path("/api/v1/inventory").and().method(HttpMethod.POST).uri(inventoryServiceUrl))
                .route(r -> r.path("/api/v1/inventory/**").and().method(HttpMethod.PUT).uri(inventoryServiceUrl))
                .route(r -> r.path("/api/v1/inventory/**").and().method(HttpMethod.DELETE).uri(inventoryServiceUrl))
                .route(r -> r.path("/api/v1/inventory/*/item").and().method(HttpMethod.POST).uri(inventoryServiceUrl))
                .route(r -> r.path("/api/v1/inventory/*/item").and().method(HttpMethod.PUT).uri(inventoryServiceUrl))
                .route(r -> r.path("/api/v1/inventory/*/item/**").and().method(HttpMethod.DELETE).uri(inventoryServiceUrl))

                .route(r -> r.path("/api/v1/vulnerable").and().method(HttpMethod.GET).uri(vulnerableServiceUrl))
                .route(r -> r.path("/api/v1/vulnerable/**").and().method(HttpMethod.GET).uri(vulnerableServiceUrl))
                .route(r -> r.path("/api/v1/vulnerable/*/passive").and().method(HttpMethod.DELETE).uri(vulnerableServiceUrl))
                .route(r -> r.path("/api/v1/product/**").and().method(HttpMethod.GET).uri(vulnerableServiceUrl))
                .route(r -> r.path("/api/v1/vendor").and().method(HttpMethod.GET).uri(vulnerableServiceUrl))
                .route(r -> r.path("/api/v1/vendor/**").and().method(HttpMethod.GET).uri(vulnerableServiceUrl))

                .route(r -> r.path("/api/v1/notification/email").and().method(HttpMethod.GET).uri(notificationServiceUrl))
                .route(r -> r.path("/api/v1/notification/email").and().method(HttpMethod.PUT).uri(notificationServiceUrl))

                .route(r -> r.path("/api/v1/identity/login").and().method(HttpMethod.POST).uri(identityServiceUrl))

                .build();
    }


}
