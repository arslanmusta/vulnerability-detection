package obss.cve.browserapigw.filter;

import obss.cve.browserapigw.security.JwtHelper;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@Component
@RefreshScope
public class AuthenticationFilter implements GlobalFilter {

    private final JwtHelper jwtHelper;

    public AuthenticationFilter(JwtHelper jwtHelper) {
        this.jwtHelper = jwtHelper;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        ServerHttpRequest request = exchange.getRequest();

        if(!request.getURI().getPath().startsWith("/api/v1/identity/login")) {
            String authorizationHeader = request.getHeaders().getOrEmpty("Authorization").stream().findFirst().orElse(null);

            if (authorizationHeader == null) {
                return createErrorResponse(exchange);
            }

            String token = authorizationHeader.split(" ")[1];
            String role;

            try {
                role = jwtHelper.getClaim(token, "role");
            }
            catch (RuntimeException ex) {
                return createErrorResponse(exchange);
            }

            if (!role.equals("Admin") && request.getMethod() != HttpMethod.GET) {
                return createErrorResponse(exchange);
            }


        }

        return chain.filter(exchange);
    }

    private Mono<Void> createErrorResponse(ServerWebExchange exchange) {
        var response = exchange.getResponse();
        response.setStatusCode(HttpStatus.UNAUTHORIZED);
        return response.setComplete();
    }
}
