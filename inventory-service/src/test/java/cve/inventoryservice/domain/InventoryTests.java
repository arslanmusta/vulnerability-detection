package cve.inventoryservice.domain;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.HashSet;

@SpringBootTest
public class InventoryTests {

    private Inventory inventory;

    @BeforeEach
    public void setUp() {
        inventory = new Inventory(new HashSet<>());
        inventory.setId(1);
        inventory.setDomain("domain1");
        inventory.setIp("1.1.1.1");
    }

    @Test
    public void itemShouldBeAdded() {
        InventoryItem newItem = new InventoryItem();
        newItem.setVendor("Vendor1");
        newItem.setProduct("Product1");
        newItem.setVersion("1.1.0");

        inventory.addInventoryItem(newItem);

        assertTrue(inventory.getInventoryItems().stream()
                .anyMatch(item ->
                                item.getId() == newItem.getId() &&
                                item.getVendor().equals(newItem.getVendor()) &&
                                item.getProduct().equals(newItem.getProduct()) &&
                                item.getVersion().equals(newItem.getVersion())
                ));

        assertSame(inventory, newItem.getInventory());
    }

    @Test
    public void itemShouldBeRemoved() {
        InventoryItem newItem = new InventoryItem();
        newItem.setVendor("Vendor1");
        newItem.setProduct("Product1");
        newItem.setVersion("1.1.0");

        inventory.addInventoryItem(newItem);

        inventory.removeInventoryItem(newItem);

        assertTrue(inventory.getInventoryItems().stream()
                .allMatch(item ->
                        !item.getVendor().equals(newItem.getVendor()) ||
                                !item.getProduct().equals(newItem.getProduct()) ||
                                !item.getVersion().equals(newItem.getVersion())
                ));
    }



    @Test
    public void mappedCorrectly() {
        var newInventory = new Inventory(new HashSet<>());
        newInventory.MapFrom(inventory);

        assertTrue(
                inventory.getDomain().equals(newInventory.getDomain()) &&
                        inventory.getIp().equals(newInventory.getIp())
        );
    }
}
