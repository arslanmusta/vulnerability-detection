package cve.inventoryservice.service;

import cve.inventoryservice.domain.Inventory;
import cve.inventoryservice.domain.InventoryItem;
import cve.inventoryservice.repository.InventoryRepository;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

@Component
public class InventoryService {

    private InventoryRepository inventoryRepository;

    public InventoryService(InventoryRepository inventoryRepository) {
        this.inventoryRepository = inventoryRepository;
    }

    public List<Inventory> findAll() {
        return inventoryRepository.findAll();
    }

    public Inventory findOne(int id) throws InventoryNotFoundException {
        return inventoryRepository.findById(id)
                .orElseThrow(() -> new InventoryNotFoundException(id));
    }

    public Inventory insert(Inventory inventory) {
        if (inventory.getInventoryItems() != null)
            inventory.getInventoryItems().forEach(i -> i.setInventory(inventory));

        return inventoryRepository.save(inventory);
    }

    public Inventory update(int id, Inventory updateInventory) throws InventoryNotFoundException {
        Inventory inventory = inventoryRepository.findById(id)
                .orElseThrow(() -> new InventoryNotFoundException(id));

        inventory.MapFrom(updateInventory);

        return inventoryRepository.save(inventory);
    }

    public void delete(int id) throws InventoryNotFoundException {
        Inventory inventory = inventoryRepository.findById(id)
                .orElseThrow(() -> new InventoryNotFoundException(id));
        inventoryRepository.delete(inventory);
    }

    public List<InventoryItem> findAllItems(int inventoryId) {
        Inventory inventory = inventoryRepository.findById(inventoryId)
                .orElseThrow(() -> new InventoryNotFoundException(inventoryId));

        return new ArrayList<>(inventory.getInventoryItems());
    }

    public InventoryItem findOneItem(int inventoryId, int inventoryItemId) {
        Inventory inventory = inventoryRepository.findById(inventoryId)
                .orElseThrow(() -> new InventoryNotFoundException(inventoryId));

        InventoryItem inventoryItem = inventory.getInventoryItems().stream()
                .filter(i -> i.getId() == inventoryItemId)
                .findFirst()
                .orElseThrow(() -> new InventoryItemNotFoundException(inventoryItemId));

        return inventoryItem;
    }

    public InventoryItem insertItem(int id, InventoryItem item) throws InventoryNotFoundException {
        Inventory inventory = inventoryRepository.findById(id)
                .orElseThrow(() -> new InventoryNotFoundException(id));

        inventory.addInventoryItem(item);

        Inventory updatedInventory = inventoryRepository.save(inventory);
        return updatedInventory.getInventoryItems().stream().max(Comparator.comparingInt(InventoryItem::getId)).orElse(null);
    }

    public InventoryItem updateItem(int id, int inventoryItemId, InventoryItem item) throws InventoryNotFoundException, InventoryItemNotFoundException {
        Inventory inventory = inventoryRepository.findById(id)
                .orElseThrow(() -> new InventoryNotFoundException(id));

        InventoryItem inventoryItem = inventory.getInventoryItems().stream()
                .filter(i -> i.getId() == inventoryItemId)
                .findFirst()
                .orElseThrow(() -> new InventoryItemNotFoundException(inventoryItemId));

        inventoryItem.setProduct(item.getProduct());
        inventoryItem.setVendor(item.getVendor());
        inventoryItem.setVersion(item.getVersion());

        Inventory updatedInventory = inventoryRepository.save(inventory);
        return updatedInventory.getInventoryItems().stream().filter(i -> i.getId() == inventoryItemId).findFirst().orElse(null);
    }

    public void deleteItem(int id, int inventoryItemId) throws InventoryNotFoundException, InventoryItemNotFoundException  {
        Inventory inventory = inventoryRepository.findById(id)
                .orElseThrow(() -> new InventoryNotFoundException(id));

        InventoryItem inventoryItem = inventory.getInventoryItems().stream()
                .filter(i -> i.getId() == inventoryItemId)
                .findFirst()
                        .orElseThrow(() -> new InventoryItemNotFoundException(inventoryItemId));

        inventory.removeInventoryItem(inventoryItem);
        inventoryRepository.save(inventory);
    }
}
