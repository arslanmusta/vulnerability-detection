package cve.vulnerabilityservice.proxy.cve.model;

import java.io.IOException;
import com.fasterxml.jackson.annotation.*;

public enum Tag {
    BROKEN_LINK, EXPLOIT, ISSUE_TRACKING, MAILING_LIST, MITIGATION, NOT_APPLICABLE, PATCH, PERMISSIONS_REQUIRED, PRODUCT, RELEASE_NOTES, TECHNICAL_DESCRIPTION, THIRD_PARTY_ADVISORY, TOOL_SIGNATURE, US_GOVERNMENT_RESOURCE, VDB_ENTRY, VENDOR_ADVISORY;

    @JsonValue
    public String toValue() {
        switch (this) {
            case BROKEN_LINK: return "Broken Link";
            case EXPLOIT: return "Exploit";
            case ISSUE_TRACKING: return "Issue Tracking";
            case MAILING_LIST: return "Mailing List";
            case MITIGATION: return "Mitigation";
            case NOT_APPLICABLE: return "Not Applicable";
            case PATCH: return "Patch";
            case PERMISSIONS_REQUIRED: return "Permissions Required";
            case PRODUCT: return "Product";
            case RELEASE_NOTES: return "Release Notes";
            case TECHNICAL_DESCRIPTION: return "Technical Description";
            case THIRD_PARTY_ADVISORY: return "Third Party Advisory";
            case TOOL_SIGNATURE: return "Tool Signature";
            case US_GOVERNMENT_RESOURCE: return "US Government Resource";
            case VDB_ENTRY: return "VDB Entry";
            case VENDOR_ADVISORY: return "Vendor Advisory";
        }
        return null;
    }

    @JsonCreator
    public static Tag forValue(String value) throws IOException {
        if (value.equals("Broken Link")) return BROKEN_LINK;
        if (value.equals("Exploit")) return EXPLOIT;
        if (value.equals("Issue Tracking")) return ISSUE_TRACKING;
        if (value.equals("Mailing List")) return MAILING_LIST;
        if (value.equals("Mitigation")) return MITIGATION;
        if (value.equals("Not Applicable")) return NOT_APPLICABLE;
        if (value.equals("Patch")) return PATCH;
        if (value.equals("Permissions Required")) return PERMISSIONS_REQUIRED;
        if (value.equals("Product")) return PRODUCT;
        if (value.equals("Release Notes")) return RELEASE_NOTES;
        if (value.equals("Technical Description")) return TECHNICAL_DESCRIPTION;
        if (value.equals("Third Party Advisory")) return THIRD_PARTY_ADVISORY;
        if (value.equals("Tool Signature")) return TOOL_SIGNATURE;
        if (value.equals("US Government Resource")) return US_GOVERNMENT_RESOURCE;
        if (value.equals("VDB Entry")) return VDB_ENTRY;
        if (value.equals("Vendor Advisory")) return VENDOR_ADVISORY;
        throw new IOException("Cannot deserialize Tag");
    }
}
