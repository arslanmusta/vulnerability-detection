package cve.vulnerabilityservice.proxy.cve.implemetation;

import cve.vulnerabilityservice.proxy.cve.CveProxy;
import cve.vulnerabilityservice.proxy.cve.model.Converter;
import cve.vulnerabilityservice.proxy.cve.model.CveResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.io.*;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.zip.GZIPInputStream;

@Component
public class CveProxyImpl implements CveProxy {

    private static final Logger log = LoggerFactory.getLogger(CveProxyImpl.class);

    @Override
    public CveResponse GetCve(String url) {
        try (InputStream is = new URL(url).openStream();
             GZIPInputStream gis = new GZIPInputStream(is);
             BufferedReader rd = new BufferedReader(new InputStreamReader(gis, StandardCharsets.UTF_8))) {

            String jsonString = readAll(rd);

            return Converter.fromJsonString(jsonString);
        } catch (IOException e) {
            log.error(e.getMessage(), e);
            return null;
        }
    }

    private static String readAll(Reader rd) throws IOException {
        StringBuilder sb = new StringBuilder();
        int cp;
        while ((cp = rd.read()) != -1) {
            sb.append((char) cp);
        }
        return sb.toString();
    }
}
