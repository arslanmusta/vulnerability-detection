package cve.vulnerabilityservice.task;

import cve.vulnerabilityservice.domain.Cpe;
import cve.vulnerabilityservice.proxy.cpe.CpeProxy;
import cve.vulnerabilityservice.proxy.cpe.model.Cpe23Item;
import cve.vulnerabilityservice.proxy.cpe.model.CpeResponse;
import cve.vulnerabilityservice.proxy.cpematch.CpeMatchProxy;
import cve.vulnerabilityservice.proxy.cpematch.model.CpeMatchResponse;
import cve.vulnerabilityservice.proxy.cve.CveProxy;
import cve.vulnerabilityservice.proxy.cve.implementation.CveProxyImpl;
import cve.vulnerabilityservice.proxy.cve.model.CveResponse;
import cve.vulnerabilityservice.repository.CpeRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class DatabaseUpdateTask {
    private static final Logger log = LoggerFactory.getLogger(CveProxyImpl.class);
    private final CveProxy cveProxy;
    private final CpeProxy cpeProxy;
    private final CpeMatchProxy cpeMatchProxy;

    private final CpeRepository cpeRepository;

    public DatabaseUpdateTask(CveProxy cveProxy, CpeProxy cpeProxy, CpeMatchProxy cpeMatchProxy, CpeRepository cpeRepository) {
        this.cveProxy = cveProxy;
        this.cpeProxy = cpeProxy;
        this.cpeMatchProxy = cpeMatchProxy;
        this.cpeRepository = cpeRepository;
    }

    @Scheduled(fixedDelayString = "${cve.update.period}")
    public void update() {
        updateCpe();
    }

    private void updateCpe() {
        // TODO: url from database
        CpeResponse cpeResponse = cpeProxy.GetCpe("https://nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml.gz");
        // TODO: control database configuration
        cpeResponse.getCpeItems().parallelStream().forEach(cpeItem -> {
            if(!cpeItem.isDeprecated()) {
                Cpe23Item cpe23Item = cpeItem.getCpe23item();

                Cpe cpe = cpeRepository.findById(cpe23Item.getName()).orElse(null);
                if(cpe == null) {
                    String[] cpeNameColons = cpe23Item.getName().split(":");

                    cpe = new Cpe();

                    cpe.setName(cpe23Item.getName());
                    cpe.setPart(cpeNameColons[2].charAt(0));
                    cpe.setVendor(cpeNameColons[3]);
                    cpe.setProduct(cpeNameColons[4]);
                    cpe.setVersion(cpeNameColons[5]);
                    cpe.setUpdate(cpeNameColons[6]);
                    cpe.setEdition(cpeNameColons[7]);
                    cpe.setLanguage(cpeNameColons[8]);
                    cpe.setSoftwareEdition(cpeNameColons[9]);
                    cpe.setTargetSoftware(cpeNameColons[10]);
                    cpe.setTargetHardware(cpeNameColons[11]);
                    cpe.setOther(cpeNameColons[12]);

                    cpeRepository.save(cpe);
                }

            }
        });
    }

    private void updateCveMatch() {
        CpeMatchResponse cpeMatchResponse = cpeMatchProxy.GetCpeMatch("https://nvd.nist.gov/feeds/json/cpematch/1.0/nvdcpematch-1.0.json.gz");
    }

    private void updateCve() {
        CveResponse cveResponse = cveProxy.GetCve("https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz");
    }
}
