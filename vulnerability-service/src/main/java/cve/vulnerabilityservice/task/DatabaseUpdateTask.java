package cve.vulnerabilityservice.task;

import cve.vulnerabilityservice.domain.Cpe;
import cve.vulnerabilityservice.domain.CpeMatch;
import cve.vulnerabilityservice.proxy.cpe.CpeProxy;
import cve.vulnerabilityservice.proxy.cpe.model.Cpe23Item;
import cve.vulnerabilityservice.proxy.cpe.model.CpeResponse;
import cve.vulnerabilityservice.proxy.cpematch.CpeMatchProxy;
import cve.vulnerabilityservice.proxy.cpematch.model.CpeMatchResponse;
import cve.vulnerabilityservice.proxy.cve.CveProxy;
import cve.vulnerabilityservice.proxy.cve.implementation.CveProxyImpl;
import cve.vulnerabilityservice.proxy.cve.model.CveResponse;
import cve.vulnerabilityservice.repository.CpeMatchRepository;
import cve.vulnerabilityservice.repository.CpeRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

@Component
public class DatabaseUpdateTask {
    private static final Logger log = LoggerFactory.getLogger(CveProxyImpl.class);
    private final CveProxy cveProxy;
    private final CpeProxy cpeProxy;
    private final CpeMatchProxy cpeMatchProxy;
    private final CpeRepository cpeRepository;
    private final CpeMatchRepository cpeMatchRepository;

    public DatabaseUpdateTask(CveProxy cveProxy, CpeProxy cpeProxy, CpeMatchProxy cpeMatchProxy, CpeRepository cpeRepository, CpeMatchRepository cpeMatchRepository) {
        this.cveProxy = cveProxy;
        this.cpeProxy = cpeProxy;
        this.cpeMatchProxy = cpeMatchProxy;
        this.cpeRepository = cpeRepository;
        this.cpeMatchRepository = cpeMatchRepository;
    }

    @Scheduled(fixedDelayString = "${cve.update.period}")
    public void update() {
        // TODO: url from database
        updateCpe("https://nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml.gz");
        updateCveMatch("https://nvd.nist.gov/feeds/json/cpematch/1.0/nvdcpematch-1.0.json.gz");
    }

    private void updateCpe(String url) {
        log.info("Calling " + url);

        CpeResponse cpeResponse = cpeProxy.GetCpe(url);

        log.info("Processing data for " + url);

        // TODO: control database configuration
        List<Cpe> cpeList = cpeResponse.getCpeItems().parallelStream().map(cpeItem -> {
            if(!cpeItem.isDeprecated()) {
                Cpe23Item cpe23Item = cpeItem.getCpe23item();

                Cpe cpe = cpeRepository.findByName(cpe23Item.getName()).orElse(null);
                if(cpe == null) {
                    String[] cpeNameColons = cpe23Item.getName().split(":");

                    cpe = new Cpe();

                    cpe.setName(cpe23Item.getName());
                    cpe.setPart(cpeNameColons[2].charAt(0));
                    cpe.setVendor(cpeNameColons[3]);
                    cpe.setProduct(cpeNameColons[4]);
                    cpe.setVersion(cpeNameColons[5]);
                    cpe.setUpdate(cpeNameColons[6]);
                    cpe.setEdition(cpeNameColons[7]);
                    cpe.setLanguage(cpeNameColons[8]);
                    cpe.setSoftwareEdition(cpeNameColons[9]);
                    cpe.setTargetSoftware(cpeNameColons[10]);
                    cpe.setTargetHardware(cpeNameColons[11]);
                    cpe.setOther(cpeNameColons[12]);

                    return cpe;
                }
            }
            return null;
        }).filter(Objects::nonNull).toList();

        log.info("Updating database for " + url);

        cpeRepository.saveAll(cpeList);

        log.info("Update completed for " + url);
    }

    private void updateCveMatch(String url) {
        log.info("Calling " + url);

        CpeMatchResponse cpeMatchResponse = cpeMatchProxy.GetCpeMatch(url);

        log.info("Processing data for " + url);

        List<CpeMatch> cpeMatchList = cpeMatchResponse.getMatches().parallelStream().map(cpeMatchModel -> {
            CpeMatch cpeMatch = new CpeMatch();

            cpeMatch.setName(cpeMatchModel.getCpe23Uri());
            cpeMatch.setVersionStartIncluding(cpeMatchModel.getVersionStartIncluding());
            cpeMatch.setVersionStartExcluding(cpeMatchModel.getVersionStartExcluding());
            cpeMatch.setVersionEndIncluding(cpeMatchModel.getVersionEndIncluding());
            cpeMatch.setVersionEndExcluding(cpeMatchModel.getVersionEndExcluding());
            cpeMatch.setVulnerable(cpeMatchModel.isVulnerable());

            Set<Cpe> cpeSet = cpeMatchModel.getCpeNames().stream().map(cpeName -> cpeRepository.findByName(cpeName.getCpe23Uri()).orElse(null)).collect(Collectors.toSet());

            cpeMatch.setCpeSet(cpeSet);

            return cpeMatch;
        }).toList();

        log.info("Updating database for " + url);

        cpeMatchRepository.saveAll(cpeMatchList);

        log.info("Update completed for " + url);
    }

    private void updateCve() {
        CveResponse cveResponse = cveProxy.GetCve("https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz");
    }
}
