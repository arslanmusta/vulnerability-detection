package obss.cve.vulnerabledetectworker;

import obss.cve.vulnerabledetectworker.domain.Config;
import obss.cve.vulnerabledetectworker.domain.Vulnerable;
import obss.cve.vulnerabledetectworker.repository.ConfigRepository;
import obss.cve.vulnerabledetectworker.repository.VulnerableRepository;
import org.bson.types.ObjectId;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.concurrent.*;

@Component
public class EventRelayTask {

    private final VulnerableRepository vulnerableRepository;
    private final ConfigRepository configRepository;
    private final KafkaTemplate<String, Vulnerable> kafkaTemplate;

    @Value(value = "${vulnerable.detect.topic}")
    private String detectTopic;

    private static final Logger log = LoggerFactory.getLogger(EventRelayTask.class);

    public EventRelayTask(VulnerableRepository vulnerableRepository, ConfigRepository configRepository, KafkaTemplate<String, Vulnerable> kafkaTemplate) {
        this.vulnerableRepository = vulnerableRepository;
        this.configRepository = configRepository;
        this.kafkaTemplate = kafkaTemplate;
    }

    @Scheduled(fixedDelayString = "${vulnerable.eventrelay.period}", initialDelayString = "${vulnerable.eventrelay.delay}")
    public void eventRelay() {
        Config config = configRepository.findById("last_vulnerable_object_id")
                .orElse(new Config("last_vulnerable_object_id", "000000000000000000000000"));

        long unixTime = System.currentTimeMillis() / 1000L;
        String unixHex = String.format("%08x", unixTime - 60);
        log.info("Unix Time: " + unixHex);

        List<Vulnerable> vulnerables = vulnerableRepository.GetRangeById(new ObjectId(config.getValue()), new ObjectId(unixHex + "0000000000000000"));
        log.info("Vulnerable size: " + vulnerables.size());

        if (vulnerables.size() > 0) {
            String maxId = vulnerables.stream()
                    .map(Vulnerable::getId)
                    .max(String::compareTo)
                    .orElse("000000000000000000000000");

            try {
                for (Vulnerable vulnerable : vulnerables) {
                    kafkaTemplate.send(detectTopic, vulnerable).get(5L, TimeUnit.SECONDS);
                }

                config.setValue(maxId);
                configRepository.save(config);
            } catch (Exception e) {
                log.error(e.getMessage(), e);
            }



        }
    }
}
