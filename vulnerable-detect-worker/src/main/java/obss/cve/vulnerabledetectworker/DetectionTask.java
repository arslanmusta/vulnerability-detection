package obss.cve.vulnerabledetectworker;

import obss.cve.vulnerabledetectworker.domain.CveItem;
import obss.cve.vulnerabledetectworker.domain.Vulnerable;
import obss.cve.vulnerabledetectworker.model.Inventory;
import obss.cve.vulnerabledetectworker.proxy.InventoryServiceProxy;
import obss.cve.vulnerabledetectworker.repository.CveItemRepository;
import obss.cve.vulnerabledetectworker.repository.VulnerableRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class DetectionTask
{
    private final InventoryServiceProxy inventoryServiceProxy;
    private final CveItemRepository cveItemRepository;
    private final VulnerableRepository vulnerableRepository;

    private static final Logger log = LoggerFactory.getLogger(DetectionTask.class);

    public DetectionTask(InventoryServiceProxy inventoryServiceProxy, CveItemRepository cveItemRepository, VulnerableRepository vulnerableRepository) {
        this.inventoryServiceProxy = inventoryServiceProxy;
        this.cveItemRepository = cveItemRepository;
        this.vulnerableRepository = vulnerableRepository;
    }

    @Scheduled(fixedDelayString = "${vulnerable.detect.period}", initialDelayString = "${vulnerable.detect.delay}")
    public void detect() {
        log.info("Vulnerable detection started.");

        List<Inventory> result = inventoryServiceProxy.GetAllInventories();

        result.forEach(inventory -> {
            inventory.getInventoryItems().forEach(inventoryItem -> {
                List<CveItem> cveItems = cveItemRepository.getByVendorAndProductAndVersion(
                        inventoryItem.getVendor(),
                        inventoryItem.getProduct(),
                        inventoryItem.getVersion());
                log.info(String.format("Detected %s for %s:%s:%s on id: %s ip: %s domain: %s", cveItems.size(), inventoryItem.getVendor(), inventoryItem.getProduct(), inventoryItem.getVersion(), inventory.getId(), inventory.getIp(), inventory.getDomain()));
                cveItems.forEach(item -> {
                    Vulnerable newVulnerable = new Vulnerable(inventory.getId(), inventoryItem.getId(), item.getId(), false);
                    if (!vulnerableRepository.exists(newVulnerable.getInventoryId(), newVulnerable.getInventoryItemId(), newVulnerable.getCveId())) {
                        vulnerableRepository.save(newVulnerable);
                    }
                });
            });
        });
    }
}
